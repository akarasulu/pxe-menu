# configuration for menu.cgi
#
# Place this file as ".mcgi.config" in the same folder as menu.cgi
#

# edit as needed
$CONFIG->{LIB_URI} = "http://10.255.255.254/boot/syslinux/lib";
$CONFIG->{CGI_URI} = "http://10.255.255.254/boot/menu.cgi";

1;

# For custom menu template, uncomment below and edit
__DATA__
######################################################################
# Standard Preamble
######################################################################
serial 0 9600
#serial 1 9600
prompt 1

######################################################################
# Menu Configuration
######################################################################
menu title DEMO: Dynamic menu over HTTP (<%= $CGI->param('q') %>)
menu margin 1

label self
  menu label .    - Reload
  kernel <%= $LIB_URI %>/menu.c32
  append <%= $CGI_URI %>?<%= $ENV{QUERY_STRING} %>

label prev
  menu label ..   - Go uplevel
  kernel <%= $LIB_URI %>/menu.c32
  append <%= $CGI_URI %>?q=<%= $UPLEVEL %>

label main
  menu label main - Jump to main menu
  kernel <%= $LIB_URI %>/menu.c32

#menu separator
#label > This is a sample dynamic syslinux menu over HTTP.
#label > With menu.cgi, you can:
#label >  - Browse folders and boot from files without writing a menu.
#label >  - Generate menu dynamically from custom template.
#label >  - Search across menu entries and show result as a menu.
#label > For more details, see: http://labs.aobac.net/boot/menu.html
menu separator

######################################################################
# Menu Items
######################################################################

<% foreach my $item (grep { $_->{type} eq ':message' } @$LIST) { %>
say <%= $item->{text} %>
<% } %>

<% foreach my $item (grep { $_->{type} eq ':asis' } @$LIST) { %>
<%= $item->{text} %>
<% } %>

<% foreach my $item (grep { $_->{type} eq ':menu' } @$LIST) { %>
label <%= $item->{name} %>
  kernel <%= $LIB_URI %>/menu.c32
  append <%= $item->{uri} %>
<% } %>

<% foreach my $item (grep { $_->{type} eq ':dir' } @$LIST) { %>
label <%= $item->{name} %>
  menu label <%= $item->{name} %>/
  kernel <%= $LIB_URI %>/menu.c32
  append <%= $item->{uri} %>
<% } %>

<% foreach my $item (grep { $_->{type} eq ':pxe' } @$LIST) { %>
label <%= $item->{name} %>
<% if ($item->{uri} =~ m|\b(n/[^/]+)|) { %>
  pxe <%= $item->{uri} %>;r=s,/pxeroot,/<%= $1 %>,g
<% } else { %>
  pxe <%= $item->{uri} %>
<% } %>
<% } %>

<% foreach my $item (grep { $_->{type} eq ':linux' } @$LIST) { %>
label <%= $item->{name} %>
  kernel <%= $item->{uri} %>
<% if ($item->{uri} =~ m|\b(n/[^/]+)|) { %>
  append <%= $item->{opt} %> panic=30 console=tty0 console=ttyS0,115200 rw root=/dev/nfs ip=dhcp nfsroot=<%= $ENV{"HTTP_HOST"} %>:/<%= $1 %>
<% } else { %>
  append <%= $item->{opt} %> panic=30 console=tty0 console=ttyS0,115200 ro root=/dev/ram
<% } %>
<% } %>

<% foreach my $xen (grep { $_->{type} eq ':xen' } @$LIST) { %>
<% foreach my $item (grep { $_->{type} eq ':linux' } @$LIST) { %>
<%     next unless $item->{uri} =~ m|\b(n/[^/]+)|; %>
label <%= $item->{name} %>-xen
  kernel <%= $LIB_URI %>/mboot.c32
  append <%= $xen->{uri} %> dom0_mem=512M noreboot com1=115200,8n1 console=com1,vga --- <%= $item->{uri} %> root=/dev/nfs rw ip=dhcp nfsroot=<%= $ENV{"HTTP_HOST"} %>:/<%= $1 %> panic=30 xencons=xvc console=hvc0 --- <%= $item->{initrd} %><% } %>
<% } %>

<% foreach my $item (grep { $_->{type} eq 'img' } @$LIST) { %>
label <%= $item->{name} %>
  kernel <%= $LIB_URI %>/memdisk
  append initrd=<%= $item->{uri} %>
<% } %>

<% foreach my $item (grep { $_->{type} eq 'esx' } @$LIST) { %>
label <%= $item->{name} %>
  kernel <%= $LIB_URI %>/mboot.c32
  append 
  append /boot/esxi/4.0/vmkboot.gz --- /boot/esxi/4.0/vmk.gz --- /boot/esxi/4.0/sys.vgz --- /boot/esxi/4.0/cim.vgz --- <%= $item->{uri} %> ipappend 2
<% } %>
